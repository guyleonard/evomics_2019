# This script will download the programs SignalP, TMHMM & RNAmmer
# from an S3 bucket for the duration of the workshop.
# After the workshop it will be removed, and you will have to request
# the programs yourself :(

# You should go and read their licenses:
# http://www.cbs.dtu.dk/cgi-bin/nph-sw_request?signalp
# http://www.cbs.dtu.dk/cgi-bin/nph-sw_request?tmhmm
# http://www.cbs.dtu.dk/cgi-bin/sw_request?rnammer
# they are also included in the downloaded tarball

# It's incredibly annoying to have to do this, why CBS insists
# on a web based request form, email download of software, and a
# entirely restrictive and non-standard license in 2016 is unknown.
# It's not 1996, guys. :) Sk√•l.

- name: Downloading CBS Software - SignalP, TMHMM, RNAmmer
  get_url:
    url: 'https://s3.amazonaws.com/2019evomics/cbs_programs.tar.gz'
    dest=: '{{ source_dir }}/cbs_programs.tar.gz'
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 5
  delay: 10

- name: Uncompressing CBS Software
  unarchive:
    src: '{{ source_dir }}/cbs_programs.tar.gz'
    dest: '{{ software_dir }}'
    copy: no
    creates: '{{software_dir}}/cbs_programs/tmhmm-2.0c.Linux.tar.gz'

# TMHMM
- name: Uncompressing TMHMM
  unarchive:
    src: '{{ software_dir }}/cbs_programs/tmhmm-2.0c.Linux.tar.gz'
    dest: '{{ software_dir }}'
    copy: no
    creates: '{{ software_dir }}/tmhmm-2.0c/README'

- name: Fixing tmhmm perl env
  lineinfile:
    dest: '{{ software_dir }}/tmhmm-2.0c/bin/tmhmm'
    regexp: '#!/usr/local/bin/perl'
    line: "#!/usr/bin/env perl"
    backup: yes

- name: Copy tmhmm to /usr/local/bin
  copy:
    src: '{{ software_dir }}/tmhmm-2.0c/bin/tmhmm'
    dest: '/usr/local/bin/tmhmm'
    mode: 0755

- name: Fixing tmhmmformat perl env
  lineinfile:
    dest: '{{ software_dir }}/tmhmm-2.0c/bin/tmhmmformat.pl'
    regexp: '#!/usr/local/bin/perl -w'
    line: "#!/usr/bin/env perl -w"
    backup: yes

- name: Copy tmhmm to /usr/local/bin
  copy:
    src: '{{ software_dir }}/tmhmm-2.0c/bin/tmhmmformat.pl'
    dest: '/usr/local/bin/tmhmmformat.pl'
    mode: 0755

- name: Copy decodehmm to /usr/local/bin
  copy:
    src: '{{ software_dir }}/tmhmm-2.0c/bin/decodeanhmm.Linux_x86_64'
    dest: '/usr/local/bin/decodeanhmm'
    mode: 0755

- name: Copying tmhmm libs to /usr/local/lib 
  copy:
    src: '{{ item }}'
    dest: /usr/local/lib
    mode: 0755
  with_fileglob:
    - '{{ software_dir }}/tmhmm-2.0c/lib/*'

# SignalP
- name: Uncompressing SignalP  
  unarchive:
    src: '{{ software_dir }}/cbs_programs/signalp-4.1e.Linux.tar.gz'
    dest: '{{ software_dir }}'
    copy: no
    creates: '{{ software_dir }}/signalp-4.1/signalp'

- name: Fixing SignalP perl env
  lineinfile:
    dest: '{{ software_dir }}/signalp-4.1/signalp'
    regexp: '#!/usr/bin/perl'
    line: "#!/usr/bin/env perl"
    backup: yes

- name: Fixing SignalP path info
  lineinfile:
    dest: '{{ software_dir }}/signalp-4.1/signalp'
    regexp: "\\s+\\$ENV\\{SIGNALP\\} = \\'/usr/cbs/bio/src/signalp-4.1\\'\\;"
    line: "$ENV{SIGNALP} = '{{software_dir}}/signalp-4.1';"
    backup: yes

- name: Fixing SignalP max allowed entries to 2000000
  lineinfile:
    dest: '{{ software_dir }}/signalp-4.1/signalp'
    regexp: "my\\s+\\$MAX_ALLOWED_ENTRIES\\=10000\\;"
    line: "my $MAX_ALLOWED_ENTRIES=2000000;"
    backup: yes

- name: Adding SignalP to PATH
  lineinfile:
    dest: '/home/{{workshop_user }}/.bash_paths'
    backrefs: yes
    backup: yes
    regexp: "PATH=((?!.*?{{software_dir}}/signalp-4.1).*?)$"
    line: "PATH=\\1:{{software_dir}}/signalp-4.1"

# RNAMMER
# This needs the *old* version of HMMER
- name: Downloading Old HMMER
  get_url:
    url: 'http://eddylab.org/software/hmmer/2.3.2/hmmer-2.3.2.tar.gz'
    dest: '{{ source_dir }}/hmmer-2.3.2.tar.gz'
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 5
  delay: 10

- name: Uncompressing Old HMMER
  unarchive:
    src: '{{ source_dir }}/hmmer-2.3.2.tar.gz'
    dest: '{{ software_dir }}'
    copy: no
    creates: '{{ software_dir }}/hmmer-2.3.2/INSTALL'

- name: Configuring old HMMER
  shell: '{{ item }}'
  args:
   chdir: '{{ software_dir }}/hmmer-2.3.2'
  loop:
    - ./configure

- name: Running make for old HMMER
  make:
    chdir: '{{ software_dir }}/hmmer-2.3.2'

- name: Copy old hmmsearch to /usr/local/bin/hmmsearch2
  copy:
    src: '{{ software_dir }}/hmmer-2.3.2/src/hmmsearch'
    dest: '/usr/local/bin/hmmsearch2'
    mode: 0755

- name: Create rnammer directory since it doesn't have one in the tar
  file:
    path: '{{ software_dir }}/rnammer'
    state: directory
    mode: 0755  

- name: Uncompressing RNAmmer
  unarchive:
    src: '{{ software_dir }}/cbs_programs/rnammer-1.2.src.tar.Z'
    dest: '{{ software_dir }}/rnammer'
    copy: no
    creates: '{{ software_dir }}/rnammer/rnammer'

- name: Fixing RNAmmer perl env
  lineinfile:
    dest: '{{ software_dir }}/rnammer/rnammer'
    regexp: '#!/usr/bin/perl'
    line: "#!/usr/bin/env perl"
    backup: yes

- name: Fixing RNAmmer old hmmsearch2 location
  lineinfile:
    dest: '{{ software_dir }}/rnammer/rnammer'
    regexp: '\s+\$HMMSEARCH_BINARY = \"/usr/cbs/bio/bin/linux64/hmmsearch\"\;'
    line: '$HMMSEARCH_BINARY = "/usr/locl/bin/hmmsearch2";'
    backup: yes

- name: Fixing RNAmmer Install Path
  lineinfile:
    dest: '{{ software_dir }}/rnammer/rnammer'
    regexp: "my\\s+\\$INSTALL_PATH = \\"/usr/cbs/bio/src/rnammer-1.2\\"\\;"
    line: "my $INSTALL_PATH = \"{{ software_dir }}/rnammer/\";"
    backup: yes

- name: Fixing core-rnammer cpu
  replace:
    dest: '{{ software_dir }}/rnammer/core-rnammer'
    regexp: '--cpu 1 ' replace=''
    backup: yes

- name: Adding RNAmmer to PATH
  lineinfile:
    dest: '/home/{{ workshop_user }}/.bash_paths'
    backrefs: yes
    backup: yes
    regexp: "PATH=((?!.*?{{software_dir}}/rnammer).*?)$"
    line: "PATH=\\1:{{software_dir}}/rnammer"